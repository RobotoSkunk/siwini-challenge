import { NextFunction, Request, Response } from 'express';
import { connect } from '../../libraries/database';
import authorizeToken from '../../libraries/authorize-token';

import DOMPurify from 'isomorphic-dompurify';

import httpError from 'http-errors';


export default async function (req: Request, res: Response, next: NextFunction)
{
	const client = await connect();

	try {
		res.setSubtitle('Descarga de Formularios');


		res.renderLayout('admin/form-download', {
			nofollow: true
		});
	} catch (e) {
		next(httpError(500, e));
	} finally {
		client.release();
	}
}


function prepareString(str: string)
{
	return `"${str.replace(/"/g, '""')}"`;
}


export async function downloadFormsPost(req: Request, res: Response, next: NextFunction)
{
	try {
		const body: {
			'token': string
		} = req.body;


		// file deepcode ignore HTTPSourceWithUncheckedType: The type of the body is checked
		if (typeof body.token !== 'string') {
			return res.status(400).send();
		}

		if (!await authorizeToken(body.token)) {
			return res.status(401).send();
		}



		const client = await connect();

		try {
			const query = await client.query('SELECT * FROM forms');
			const categories = await client.query('SELECT * FROM categories');


			res.header('Content-Type', 'text/csv');
			res.header('Content-Disposition',
					   'attachment; filename="forms-' + new Date().toISOString().slice(0, 10) + '.csv"');

			const columnNames = [
				'ID',
				'Nombre del Robot',
				'Categoría',
				'Imagen del Robot',

				'Nombre del Equipo',
				'Nombre del Líder',
				'Correo del Líder',
				'Teléfono de Contacto',
				'Asistente 1',
				'Asistente 2',
				'Asesor',

				'Institución',
				'País',

				'Imagen del Recibo',
			]

			res.write(columnNames.join(',') + '\n');


			for (const row of query.rows) {
				const category = categories.rows.find((category) => category.id === row.category);

				const data = [
					row.id,
					row.robot_name,
					category.name,
					row.robot_picture ? `http://${req.headers.host}/picture/${row.robot_picture}` : ' ',

					row.team_name,
					row.team_captain,
					row.team_captain_email.toLowerCase(),
					row.team_captain_phone ? prepareString(row.team_captain_phone) : ' ',
					row.assistant_1,
					row.assistant_2,
					row.consultant,

					row.institution_or_company,
					row.country,

					row.checkout_picture ? `http://${req.headers.host}/picture/${row.checkout_picture}` : ' '
				];

				for (let i = 0; i < data.length; i++) {
					if (typeof data[i] === 'string') {
						data[i] = prepareString(DOMPurify.sanitize(data[i]));
					}
				}


				// file deepcode ignore XSS: The URL is generated by the server
				res.write(data.join(',') + '\n');
			}

			res.end();
			return;
		} catch (e) {
			next(httpError(500, e));
		} finally {
			client.release();
		}
	} catch (e) {
		next(httpError(500, e));
	}
}
